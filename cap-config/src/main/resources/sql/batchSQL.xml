<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd">

	<util:map id="batchSql" map-class="java.util.HashMap"
		key-type="java.lang.String">
		<entry key="batchJob.findPage">
			<value><![CDATA[select * from ${batch.table-prefix}JOB]]></value>
		</entry>
		<entry key="batchJob.findById">
			<value><![CDATA[select * from ${batch.table-prefix}JOB where jobId=:jobId]]></value>
		</entry>
		<entry key="batchJob.insert">
			<value><![CDATA[insert into ${batch.table-prefix}JOB(jobId,jobDesc,jobResource,updater,updateTime) VALUES(:jobId,:jobDesc,:jobResource,:updater,:updateTime)]]></value>
		</entry>
		<entry key="batchJob.update">
			<value><![CDATA[update ${batch.table-prefix}JOB set jobDesc=:jobDesc,jobResource=:jobResource,updater=:updater,updateTime=:updateTime where jobId=:jobId]]></value>
		</entry>
		<entry key="batchJob.delete">
			<value><![CDATA[delete from ${batch.table-prefix}JOB where jobId=:jobId]]></value>
		</entry>
		<entry key="batchSch.findPage">
			<value><![CDATA[select * from ${batch.table-prefix}SCHEDULE]]></value>
		</entry>
		<entry key="batchSch.findByHost">
			<value><![CDATA[select * from ${batch.table-prefix}SCHEDULE where exeHost in (:hostIds)]]></value>
		</entry>
		<entry key="batchSch.findById">
			<value><![CDATA[select * from ${batch.table-prefix}SCHEDULE where schId=:schId]]></value>
		</entry>
		<entry key="batchSch.insert">
			<value><![CDATA[insert into ${batch.table-prefix}SCHEDULE(schId,schDesc,isEnabled,jobId,schType,cronExpression,timeZoneId,repeatCount,repeatInterval,priority,exeHost,jobData,isNotify,notifyStatus,notifyTo,updater,updateTime) 
	VALUES(:schId,:schDesc,:isEnabled,:jobId,:schType,:cronExpression,:timeZoneId,:repeatCount,:repeatInterval,:priority,:exeHost,:jobData,:isNotify,:notifyStatus,:notifyTo,:updater,:updateTime)]]></value>
		</entry>
		<entry key="batchSch.update">
			<value><![CDATA[update ${batch.table-prefix}SCHEDULE set schDesc=:schDesc,isEnabled=:isEnabled,jobId=:jobId,schType=:schType,cronExpression=:cronExpression,timeZoneId=:timeZoneId
	,repeatCount=:repeatCount,repeatInterval=:repeatInterval,priority=:priority,exeHost=:exeHost
	,jobData=:jobData,isNotify=:isNotify,notifyStatus=:notifyStatus,notifyTo=:notifyTo,updater=:updater,updateTime=:updateTime where schId=:schId]]></value>
		</entry>
		<entry key="batchSch.delete">
			<value><![CDATA[delete from ${batch.table-prefix}SCHEDULE where schId=:schId]]></value>
		</entry>
		<entry key="batchSch.deleteByJob">
			<value><![CDATA[delete from ${batch.table-prefix}SCHEDULE where jobId =:jobId]]></value>
		</entry>
		<entry key="JobExecution.findPage">
			<value><![CDATA[select e.job_execution_id,e.create_time,e.start_time,e.end_time,e.status,e.exit_code,e.executor,i.job_instance_id,i.job_name 
	from ${batch.table-prefix}JOB_EXECUTION E inner join ${batch.table-prefix}JOB_INSTANCE I on E.JOB_INSTANCE_ID=I.JOB_INSTANCE_ID]]></value>
		</entry>
		<entry key="jobExecution.findById">
			<value><![CDATA[SELECT e.JOB_EXECUTION_ID,e. START_TIME, e.END_TIME, e.STATUS, e.EXIT_CODE, e.EXIT_MESSAGE,e.executor,i.job_NAME,e.JOB_INSTANCE_ID  
	from ${batch.table-prefix}JOB_EXECUTION e inner join ${batch.table-prefix}JOB_INSTANCE I on E.JOB_INSTANCE_ID=I.JOB_INSTANCE_ID
	where e.JOB_EXECUTION_ID = :jobExecutionId]]></value>
		</entry>
		<entry key="jobParams.findById">
			<value><![CDATA[SELECT * from ${batch.table-prefix}JOB_PARAMS where JOB_INSTANCE_ID = :jobExecutionId]]></value>
		</entry>
		<entry key="stepExecution.findByExId">
			<value><![CDATA[SELECT * from ${batch.table-prefix}STEP_EXECUTION where JOB_EXECUTION_ID = :jobExecutionId order by STEP_EXECUTION_ID]]></value>
		</entry>
		<entry key="jobExecution.updateById">
			<value><![CDATA[update ${batch.table-prefix}JOB_EXECUTION set executor=:executor where JOB_EXECUTION_ID = :jobExecutionId]]></value>
		</entry>
	</util:map>

</beans>
